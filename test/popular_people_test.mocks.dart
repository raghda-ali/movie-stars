// Mocks generated by Mockito 5.4.6 from annotations
// in movie_stars/test/popular_people_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_stars/core/exceptions/dio_exceptions.dart' as _i5;
import 'package:movie_stars/features/popular_people/domain/entities/person_entity.dart'
    as _i7;
import 'package:movie_stars/features/popular_people/domain/entities/person_images_response_entity.dart'
    as _i8;
import 'package:movie_stars/features/popular_people/domain/entities/person_response_entity.dart'
    as _i6;
import 'package:movie_stars/features/popular_people/domain/repositories/people_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PeopleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeopleRepository extends _i1.Mock implements _i3.PeopleRepository {
  MockPeopleRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.DioExceptions, _i6.PersonResponseEntity>>
  getPopularPeople({required int? page}) =>
      (super.noSuchMethod(
            Invocation.method(#getPopularPeople, [], {#page: page}),
            returnValue: _i4.Future<
              _i2.Either<_i5.DioExceptions, _i6.PersonResponseEntity>
            >.value(
              _FakeEither_0<_i5.DioExceptions, _i6.PersonResponseEntity>(
                this,
                Invocation.method(#getPopularPeople, [], {#page: page}),
              ),
            ),
          )
          as _i4.Future<
            _i2.Either<_i5.DioExceptions, _i6.PersonResponseEntity>
          >);

  @override
  _i4.Future<_i2.Either<_i5.DioExceptions, _i7.PersonEntity>> getPersonDetails({
    required int? personId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPersonDetails, [], {#personId: personId}),
            returnValue: _i4.Future<
              _i2.Either<_i5.DioExceptions, _i7.PersonEntity>
            >.value(
              _FakeEither_0<_i5.DioExceptions, _i7.PersonEntity>(
                this,
                Invocation.method(#getPersonDetails, [], {#personId: personId}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.DioExceptions, _i7.PersonEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.DioExceptions, _i8.PersonImagesResponseEntity>>
  getPersonImages({required int? personId}) =>
      (super.noSuchMethod(
            Invocation.method(#getPersonImages, [], {#personId: personId}),
            returnValue: _i4.Future<
              _i2.Either<_i5.DioExceptions, _i8.PersonImagesResponseEntity>
            >.value(
              _FakeEither_0<_i5.DioExceptions, _i8.PersonImagesResponseEntity>(
                this,
                Invocation.method(#getPersonImages, [], {#personId: personId}),
              ),
            ),
          )
          as _i4.Future<
            _i2.Either<_i5.DioExceptions, _i8.PersonImagesResponseEntity>
          >);
}
